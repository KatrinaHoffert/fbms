# Sets the log level (DEBUG) and the appender to use (A1). The appender is what
# "appends" configuration to the logger.
# Available log levels are:
#   * DEBUG
#   * INFO
#   * WARN
#   * ERROR
#   * FATAL
# Log levels higher in the list have precedence over those lower in the list. So
# if the log level is set to WARN, then WARN, ERROR, and FATAL level log commands
# will be executed, while DEBUG and INFO will not.
log4j.rootLogger=DEBUG, A1

# A1 set to be a file appender. This creates a simple log file.
log4j.appender.A1=org.apache.log4j.FileAppender

# The name of the file to write to.
log4j.appender.A1.File=example.log

# Tells the logger that we will use a customized layout for log messages (specified on
# the next line).
log4j.appender.A1.layout=org.apache.log4j.PatternLayout

# The customized layout for the log messages.
#   %5p: Log level (DEBUG, WARN, etc). The 5 gives the field a fixed length of 5 characters,
#        for formatting purposes.
#   %t:  Date and time (in ISO 8601 format)
#   %F:  The file the log command was in. Program must have been compiled with debug mode
#        on. Extremely slow, so should not be used in a release version.
#   %L:  The line number the log command was in. Program must have been compiled with debug
#        mode on. Extremely slow, so should not be used in a release version.
#   %m:  The actual log message
#   %n:  A new line character (OS dependent)
# Example: [2013-09-26 17:13:05,049]  INFO (DemoMain.java:16) - Started logging...
log4j.appender.A1.layout.ConversionPattern=[%d] %5p (%F:%L) - %m%n

# Overwrite (not append) to the log on new run (so we don't keep reusing the same log file
# until it's massive in size)
log4j.appender.A1.Append=false