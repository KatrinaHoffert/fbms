<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!--
		mainLogger set to be a file appender. This creates a simple log file.
	-->
	<appender name="mainLogger" class="org.apache.log4j.FileAppender">
		
		<!--
			The name of the file to write to.
		-->
		<param name="File" value="example.log" />

		<!-- "appends" configuration to the logger.
			Available log levels are:
			  * DEBUG
			  * INFO
			  * WARN
			  * ERROR
			  * FATAL
			Log levels higher in the list have precedence over those lower in the list. So
			if the log level is set to WARN, then WARN, ERROR, and FATAL level log commands
			will be executed, while DEBUG and INFO will not.
		-->
		<param name="Threshold" value="DEBUG" />

		<!--
			Overwrite (not append) to the log on new run (so we don't keep reusing the same log
			file until it's massive in size)
		-->
		<param name="Append" value="false" />

		<!--
			The customized layout for the log messages.
			  %5p: Log level (DEBUG, WARN, etc). The 5 gives the field a fixed length of 5
			       characters, for formatting purposes.
			  %t:  Date and time (in ISO 8601 format)
			  %F:  The file the log command was in. Program must have been compiled with debug mode
			       on. Extremely slow, so should not be used in a release version.
			  %L:  The line number the log command was in. Program must have been compiled with
			       debug mode on. Extremely slow, so should not be used in a release version.
			  %m:  The actual log message
			  %n:  A new line character (OS dependent)
			Example: [2013-09-26 17:13:05,049]  INFO (DemoMain.java:16) - Started logging...
		-->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d] %5p (%F:%L) - %m%n"/>
		</layout>
	</appender>

	<!--
		The logger to use for the Control class (actually everywhere, since it's public static)
	-->
	<logger name="cmpt370.fbms.Control">
		<appender-ref ref="mainLogger"/>
	</logger>
</log4j:configuration>